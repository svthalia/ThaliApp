/**
 * API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unknown
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Device model module.
 * @module model/Device
 * @version unknown
 */
class Device {
  /**
   * Constructs a new <code>Device</code>.
   * @alias module:model/Device
   * @param registrationId {String}
   * @param type {module:model/Device.TypeEnum}
   */
  constructor(registrationId, type) {
    Device.initialize(this, registrationId, type);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, registrationId, type) {
    obj['registration_id'] = registrationId;
    obj['type'] = type;
  }

  /**
   * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Device} obj Optional instance to populate.
   * @return {module:model/Device} The populated <code>Device</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Device();

      if (data.hasOwnProperty('pk')) {
        obj['pk'] = ApiClient.convertToType(data['pk'], 'Number');
      }
      if (data.hasOwnProperty('registration_id')) {
        obj['registration_id'] = ApiClient.convertToType(
          data['registration_id'],
          'String'
        );
      }
      if (data.hasOwnProperty('active')) {
        obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
      }
      if (data.hasOwnProperty('date_created')) {
        obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('receive_category')) {
        obj['receive_category'] = ApiClient.convertToType(data['receive_category'], [
          'String',
        ]);
      }
    }
    return obj;
  }
}

/**
 * @member {Number} pk
 */
Device.prototype['pk'] = undefined;

/**
 * @member {String} registration_id
 */
Device.prototype['registration_id'] = undefined;

/**
 * Inactive devices will not be sent notifications
 * @member {Boolean} active
 * @default true
 */
Device.prototype['active'] = true;

/**
 * @member {Date} date_created
 */
Device.prototype['date_created'] = undefined;

/**
 * @member {module:model/Device.TypeEnum} type
 */
Device.prototype['type'] = undefined;

/**
 * @member {Array.<String>} receive_category
 */
Device.prototype['receive_category'] = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Device['TypeEnum'] = {
  /**
   * value: "ios"
   * @const
   */
  ios: 'ios',

  /**
   * value: "android"
   * @const
   */
  android: 'android',
};

export default Device;
