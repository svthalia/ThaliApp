/**
 * API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unknown
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthToken from '../model/AuthToken';

/**
 * TokenAuth service.
 * @module api/TokenAuthApi
 * @version unknown
 */
export default class TokenAuthApi {
  /**
   * Constructs a new TokenAuthApi.
   * @alias module:api/TokenAuthApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Custom override of the AuthToken view to force lowercase the username
   * @param {String} username
   * @param {String} password
   * @param {Object} opts Optional parameters
   * @param {String} opts.token
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AuthToken} and HTTP response
   */
  createAuthTokenWithHttpInfo(username, password, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'username' is set
    if (username === undefined || username === null) {
      throw new Error(
        "Missing the required parameter 'username' when calling createAuthToken"
      );
    }
    // verify the required parameter 'password' is set
    if (password === undefined || password === null) {
      throw new Error(
        "Missing the required parameter 'password' when calling createAuthToken"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {
      username: username,
      password: password,
      token: opts['token'],
    };

    let authNames = [];
    let contentTypes = [
      'application/x-www-form-urlencoded',
      'multipart/form-data',
      'application/json',
    ];
    let accepts = ['application/json'];
    let returnType = AuthToken;
    return this.apiClient.callApi(
      '/api/v1/token-auth/',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Custom override of the AuthToken view to force lowercase the username
   * @param {String} username
   * @param {String} password
   * @param {Object} opts Optional parameters
   * @param {String} opts.token
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AuthToken}
   */
  createAuthToken(username, password, opts) {
    return this.createAuthTokenWithHttpInfo(username, password, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
}
