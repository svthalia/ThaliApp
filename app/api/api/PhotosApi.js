/**
 * API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unknown
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Album from '../model/Album';
import InlineResponse2007 from '../model/InlineResponse2007';
import PhotoCreate from '../model/PhotoCreate';

/**
 * Photos service.
 * @module api/PhotosApi
 * @version unknown
 */
export default class PhotosApi {
  /**
   * Constructs a new PhotosApi.
   * @alias module:api/PhotosApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Create album if the request user is allowed to.
   * @param {Object} opts Optional parameters
   * @param {module:model/Album} opts.album
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Album} and HTTP response
   */
  createAlbumWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = opts['album'];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [
      'application/json',
      'application/x-www-form-urlencoded',
      'multipart/form-data',
    ];
    let accepts = ['application/json'];
    let returnType = Album;
    return this.apiClient.callApi(
      '/api/v1/photos/albums/',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create album if the request user is allowed to.
   * @param {Object} opts Optional parameters
   * @param {module:model/Album} opts.album
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Album}
   */
  createAlbum(opts) {
    return this.createAlbumWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create photo if the request user is allowed to.
   * @param {Object} opts Optional parameters
   * @param {module:model/PhotoCreate} opts.photoCreate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PhotoCreate} and HTTP response
   */
  createPhotoWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = opts['photoCreate'];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [
      'application/json',
      'application/x-www-form-urlencoded',
      'multipart/form-data',
    ];
    let accepts = ['application/json'];
    let returnType = PhotoCreate;
    return this.apiClient.callApi(
      '/api/v1/photos/images/',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create photo if the request user is allowed to.
   * @param {Object} opts Optional parameters
   * @param {module:model/PhotoCreate} opts.photoCreate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PhotoCreate}
   */
  createPhoto(opts) {
    return this.createPhotoWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ViewSet class for an Album object.
   * @param {String} id A unique integer value identifying this album.
   * @param {Object} opts Optional parameters
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  destroyAlbumWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling destroyAlbum");
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {
      search: opts['search'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      '/api/v1/photos/albums/{id}/',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ViewSet class for an Album object.
   * @param {String} id A unique integer value identifying this album.
   * @param {Object} opts Optional parameters
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  destroyAlbum(id, opts) {
    return this.destroyAlbumWithHttpInfo(id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ViewSet class for an Album object.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
   */
  listAlbumsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      limit: opts['limit'],
      offset: opts['offset'],
      search: opts['search'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = InlineResponse2007;
    return this.apiClient.callApi(
      '/api/v1/photos/albums/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ViewSet class for an Album object.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
   */
  listAlbums(opts) {
    return this.listAlbumsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * ViewSet class for an Album object.
   * @param {String} id A unique integer value identifying this album.
   * @param {Object} opts Optional parameters
   * @param {String} opts.search A search term.
   * @param {module:model/Album} opts.album
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Album} and HTTP response
   */
  partialUpdateAlbumWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = opts['album'];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling partialUpdateAlbum"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {
      search: opts['search'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [
      'application/json',
      'application/x-www-form-urlencoded',
      'multipart/form-data',
    ];
    let accepts = ['application/json'];
    let returnType = Album;
    return this.apiClient.callApi(
      '/api/v1/photos/albums/{id}/',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ViewSet class for an Album object.
   * @param {String} id A unique integer value identifying this album.
   * @param {Object} opts Optional parameters
   * @param {String} opts.search A search term.
   * @param {module:model/Album} opts.album
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Album}
   */
  partialUpdateAlbum(id, opts) {
    return this.partialUpdateAlbumWithHttpInfo(id, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * ViewSet class for a Photo object.
   * @param {String} id A unique integer value identifying this photo.
   * @param {Object} opts Optional parameters
   * @param {module:model/PhotoCreate} opts.photoCreate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PhotoCreate} and HTTP response
   */
  partialUpdatePhotoWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = opts['photoCreate'];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling partialUpdatePhoto"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [
      'application/json',
      'application/x-www-form-urlencoded',
      'multipart/form-data',
    ];
    let accepts = ['application/json'];
    let returnType = PhotoCreate;
    return this.apiClient.callApi(
      '/api/v1/photos/images/{id}/',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ViewSet class for a Photo object.
   * @param {String} id A unique integer value identifying this photo.
   * @param {Object} opts Optional parameters
   * @param {module:model/PhotoCreate} opts.photoCreate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PhotoCreate}
   */
  partialUpdatePhoto(id, opts) {
    return this.partialUpdatePhotoWithHttpInfo(id, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * ViewSet class for an Album object.
   * @param {String} id A unique integer value identifying this album.
   * @param {Object} opts Optional parameters
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Album} and HTTP response
   */
  retrieveAlbumWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling retrieveAlbum");
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {
      search: opts['search'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Album;
    return this.apiClient.callApi(
      '/api/v1/photos/albums/{id}/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * ViewSet class for an Album object.
   * @param {String} id A unique integer value identifying this album.
   * @param {Object} opts Optional parameters
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Album}
   */
  retrieveAlbum(id, opts) {
    return this.retrieveAlbumWithHttpInfo(id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Create album if the request user is allowed to.
   * @param {String} id A unique integer value identifying this album.
   * @param {Object} opts Optional parameters
   * @param {String} opts.search A search term.
   * @param {module:model/Album} opts.album
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Album} and HTTP response
   */
  updateAlbumWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = opts['album'];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateAlbum");
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {
      search: opts['search'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [
      'application/json',
      'application/x-www-form-urlencoded',
      'multipart/form-data',
    ];
    let accepts = ['application/json'];
    let returnType = Album;
    return this.apiClient.callApi(
      '/api/v1/photos/albums/{id}/',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Create album if the request user is allowed to.
   * @param {String} id A unique integer value identifying this album.
   * @param {Object} opts Optional parameters
   * @param {String} opts.search A search term.
   * @param {module:model/Album} opts.album
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Album}
   */
  updateAlbum(id, opts) {
    return this.updateAlbumWithHttpInfo(id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update photo if the request user is allowed to.
   * @param {String} id A unique integer value identifying this photo.
   * @param {Object} opts Optional parameters
   * @param {module:model/PhotoCreate} opts.photoCreate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PhotoCreate} and HTTP response
   */
  updatePhotoWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = opts['photoCreate'];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updatePhoto");
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [
      'application/json',
      'application/x-www-form-urlencoded',
      'multipart/form-data',
    ];
    let accepts = ['application/json'];
    let returnType = PhotoCreate;
    return this.apiClient.callApi(
      '/api/v1/photos/images/{id}/',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update photo if the request user is allowed to.
   * @param {String} id A unique integer value identifying this photo.
   * @param {Object} opts Optional parameters
   * @param {module:model/PhotoCreate} opts.photoCreate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PhotoCreate}
   */
  updatePhoto(id, opts) {
    return this.updatePhotoWithHttpInfo(id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
