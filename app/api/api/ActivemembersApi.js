/**
 * API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unknown
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse200 from '../model/InlineResponse200';
import MemberGroup from '../model/MemberGroup';

/**
 * Activemembers service.
 * @module api/ActivemembersApi
 * @version unknown
 */
export default class ActivemembersApi {
  /**
   * Constructs a new ActivemembersApi.
   * @alias module:api/ActivemembersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Viewset that renders or edits a member.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @param {String} opts.ordering Which field to use when ordering the results.
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
   */
  listMemberGroupsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      limit: opts['limit'],
      offset: opts['offset'],
      ordering: opts['ordering'],
      search: opts['search'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ['oauth2'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = InlineResponse200;
    return this.apiClient.callApi(
      '/api/v1/activemembers/groups/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Viewset that renders or edits a member.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @param {String} opts.ordering Which field to use when ordering the results.
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
   */
  listMemberGroups(opts) {
    return this.listMemberGroupsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Viewset that renders or edits a member.
   * @param {String} id A unique integer value identifying this member group.
   * @param {Object} opts Optional parameters
   * @param {String} opts.ordering Which field to use when ordering the results.
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberGroup} and HTTP response
   */
  retrieveMemberGroupWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling retrieveMemberGroup"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {
      ordering: opts['ordering'],
      search: opts['search'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = ['oauth2'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = MemberGroup;
    return this.apiClient.callApi(
      '/api/v1/activemembers/groups/{id}/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Viewset that renders or edits a member.
   * @param {String} id A unique integer value identifying this member group.
   * @param {Object} opts Optional parameters
   * @param {String} opts.ordering Which field to use when ordering the results.
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberGroup}
   */
  retrieveMemberGroup(id, opts) {
    return this.retrieveMemberGroupWithHttpInfo(id, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
}
