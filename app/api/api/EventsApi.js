/**
 * API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unknown
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventRegistrationAdminList from '../model/EventRegistrationAdminList';
import EventRetrieve from '../model/EventRetrieve';
import EventsCalenderJS from '../model/EventsCalenderJS';
import InlineResponse2001 from '../model/InlineResponse2001';

/**
 * Events service.
 * @module api/EventsApi
 * @version unknown
 */
export default class EventsApi {
  /**
   * Constructs a new EventsApi.
   * @alias module:api/EventsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Defines a custom route that outputs the correctly formatted events information for CalendarJS, published events only :param request: the request object  :return: response containing the data
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsCalenderJS} and HTTP response
   */
  calendarjsEventWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EventsCalenderJS;
    return this.apiClient.callApi(
      '/api/v1/events/calendarjs/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Defines a custom route that outputs the correctly formatted events information for CalendarJS, published events only :param request: the request object  :return: response containing the data
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventsCalenderJS}
   */
  calendarjsEvent() {
    return this.calendarjsEventWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Defines the viewset for events, requires an authenticated user and enables ordering on the event start/end.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @param {String} opts.ordering Which field to use when ordering the results.
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
   */
  listEventsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      limit: opts['limit'],
      offset: opts['offset'],
      ordering: opts['ordering'],
      search: opts['search'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = InlineResponse2001;
    return this.apiClient.callApi(
      '/api/v1/events/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Defines the viewset for events, requires an authenticated user and enables ordering on the event start/end.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @param {String} opts.ordering Which field to use when ordering the results.
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
   */
  listEvents(opts) {
    return this.listEventsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Defines the viewset for events, requires an authenticated user and enables ordering on the event start/end.
   * @param {String} id A unique integer value identifying this event.
   * @param {Object} opts Optional parameters
   * @param {String} opts.ordering Which field to use when ordering the results.
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventRetrieve} and HTTP response
   */
  retrieveEventWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling retrieveEvent");
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {
      ordering: opts['ordering'],
      search: opts['search'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EventRetrieve;
    return this.apiClient.callApi(
      '/api/v1/events/{id}/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Defines the viewset for events, requires an authenticated user and enables ordering on the event start/end.
   * @param {String} id A unique integer value identifying this event.
   * @param {Object} opts Optional parameters
   * @param {String} opts.ordering Which field to use when ordering the results.
   * @param {String} opts.search A search term.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventRetrieve}
   */
  retrieveEvent(id, opts) {
    return this.retrieveEventWithHttpInfo(id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Defines a custom route for the event's registrations, can filter on registration status if the user is an organiser  :param request: the request object :param pk: the primary key of the event :return: the registrations of the event
   * @param {String} id A unique integer value identifying this event.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventRegistrationAdminList} and HTTP response
   */
  retrieveRegistrationsEventWithHttpInfo(id) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling retrieveRegistrationsEvent"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EventRegistrationAdminList;
    return this.apiClient.callApi(
      '/api/v1/events/{id}/registrations/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Defines a custom route for the event's registrations, can filter on registration status if the user is an organiser  :param request: the request object :param pk: the primary key of the event :return: the registrations of the event
   * @param {String} id A unique integer value identifying this event.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventRegistrationAdminList}
   */
  retrieveRegistrationsEvent(id) {
    return this.retrieveRegistrationsEventWithHttpInfo(id).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Defines a custom route that outputs the correctly formatted events information for CalendarJS, unpublished events only  :param request: the request object :return: response containing the data
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventsCalenderJS} and HTTP response
   */
  unpublishedEventWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EventsCalenderJS;
    return this.apiClient.callApi(
      '/api/v1/events/unpublished/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Defines a custom route that outputs the correctly formatted events information for CalendarJS, unpublished events only  :param request: the request object :return: response containing the data
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventsCalenderJS}
   */
  unpublishedEvent() {
    return this.unpublishedEventWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Defines a custom route for the event's registrations, can filter on registration status if the user is an organiser  :param request: the request object :param pk: the primary key of the event :return: the registrations of the event
   * @param {String} id A unique integer value identifying this event.
   * @param {Object} opts Optional parameters
   * @param {module:model/EventRegistrationAdminList} opts.eventRegistrationAdminList
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EventRegistrationAdminList} and HTTP response
   */
  updateRegistrationsEventWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = opts['eventRegistrationAdminList'];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling updateRegistrationsEvent"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [
      'application/json',
      'application/x-www-form-urlencoded',
      'multipart/form-data',
    ];
    let accepts = ['application/json'];
    let returnType = EventRegistrationAdminList;
    return this.apiClient.callApi(
      '/api/v1/events/{id}/registrations/',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Defines a custom route for the event's registrations, can filter on registration status if the user is an organiser  :param request: the request object :param pk: the primary key of the event :return: the registrations of the event
   * @param {String} id A unique integer value identifying this event.
   * @param {Object} opts Optional parameters
   * @param {module:model/EventRegistrationAdminList} opts.eventRegistrationAdminList
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EventRegistrationAdminList}
   */
  updateRegistrationsEvent(id, opts) {
    return this.updateRegistrationsEventWithHttpInfo(id, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }
}
