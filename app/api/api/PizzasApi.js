/**
 * API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: unknown
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2006 from '../model/InlineResponse2006';
import Order from '../model/Order';
import Pizza from '../model/Pizza';

/**
 * Pizzas service.
 * @module api/PizzasApi
 * @version unknown
 */
export default class PizzasApi {
  /**
   * Constructs a new PizzasApi.
   * @alias module:api/PizzasApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * @param {Object} opts Optional parameters
   * @param {module:model/Order} opts.order
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
   */
  createOrderWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = opts['order'];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [
      'application/json',
      'application/x-www-form-urlencoded',
      'multipart/form-data',
    ];
    let accepts = ['application/json'];
    let returnType = Order;
    return this.apiClient.callApi(
      '/api/v1/pizzas/orders/',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {Object} opts Optional parameters
   * @param {module:model/Order} opts.order
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
   */
  createOrder(opts) {
    return this.createOrderWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * @param {String} id A unique integer value identifying this order.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  destroyOrderWithHttpInfo(id) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling destroyOrder");
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      '/api/v1/pizzas/orders/{id}/',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {String} id A unique integer value identifying this order.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  destroyOrder(id) {
    return this.destroyOrderWithHttpInfo(id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Pizza} and HTTP response
   */
  eventProductWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Pizza;
    return this.apiClient.callApi(
      '/api/v1/pizzas/event/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Pizza}
   */
  eventProduct() {
    return this.eventProductWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response
   */
  listOrdersWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      limit: opts['limit'],
      offset: opts['offset'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = InlineResponse2006;
    return this.apiClient.callApi(
      '/api/v1/pizzas/orders/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2006}
   */
  listOrders(opts) {
    return this.listOrdersWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
   */
  listProductsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      limit: opts['limit'],
      offset: opts['offset'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = InlineResponse2005;
    return this.apiClient.callApi(
      '/api/v1/pizzas/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit Number of results to return per page.
   * @param {Number} opts.offset The initial index from which to return the results.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
   */
  listProducts(opts) {
    return this.listProductsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * @param {String} id A unique integer value identifying this order.
   * @param {Object} opts Optional parameters
   * @param {module:model/Order} opts.order
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
   */
  partialUpdateOrderWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = opts['order'];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling partialUpdateOrder"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [
      'application/json',
      'application/x-www-form-urlencoded',
      'multipart/form-data',
    ];
    let accepts = ['application/json'];
    let returnType = Order;
    return this.apiClient.callApi(
      '/api/v1/pizzas/orders/{id}/',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {String} id A unique integer value identifying this order.
   * @param {Object} opts Optional parameters
   * @param {module:model/Order} opts.order
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
   */
  partialUpdateOrder(id, opts) {
    return this.partialUpdateOrderWithHttpInfo(id, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * @param {String} id A unique integer value identifying this order.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
   */
  retrieveOrderWithHttpInfo(id) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling retrieveOrder");
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Order;
    return this.apiClient.callApi(
      '/api/v1/pizzas/orders/{id}/',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {String} id A unique integer value identifying this order.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
   */
  retrieveOrder(id) {
    return this.retrieveOrderWithHttpInfo(id).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * @param {String} id A unique integer value identifying this order.
   * @param {Object} opts Optional parameters
   * @param {module:model/Order} opts.order
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
   */
  updateOrderWithHttpInfo(id, opts) {
    opts = opts || {};
    let postBody = opts['order'];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling updateOrder");
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [
      'application/json',
      'application/x-www-form-urlencoded',
      'multipart/form-data',
    ];
    let accepts = ['application/json'];
    let returnType = Order;
    return this.apiClient.callApi(
      '/api/v1/pizzas/orders/{id}/',
      'PUT',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * @param {String} id A unique integer value identifying this order.
   * @param {Object} opts Optional parameters
   * @param {module:model/Order} opts.order
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
   */
  updateOrder(id, opts) {
    return this.updateOrderWithHttpInfo(id, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
